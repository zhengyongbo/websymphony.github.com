<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://websymphony.net</link>
    <atom:link href="http://websymphony.net/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Sun, 28 Jun 2015 14:28:33 +0000</pubDate>
    <lastBuildDate>Sun, 28 Jun 2015 14:28:33 +0000</lastBuildDate>

    
    
    <item>
      <title>How to use UUIDs as Primary Key with ecto</title>
      <link>http://websymphony.net/blog/2015/06/28/how-to-use-uuid-as-primary-key-in-ecto-phoenix/</link>
      <pubDate>Sun, 28 Jun 2015 13:23:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2015/06/28/how-to-use-uuid-as-primary-key-in-ecto-phoenix</guid>
      <description>&lt;p&gt;Recently, I was playing around with &lt;a href=&quot;http://phoenixframework.org&quot;&gt;Phoenix Framework (version: &lt;em&gt;0.13.1&lt;/em&gt;)&lt;/a&gt; with Postgres as the database. Instead of using IDs for primary key, I wanted to use UUIDs. Since Phoenix and associated projects haven’t hit 1.0 yet, api is still under flux.&lt;/p&gt;

&lt;p&gt;As of this post, there are two resources with instructions on how to achive this and both didn’t seem to work. A &lt;a href=&quot;http://stackoverflow.com/questions/30004008/setting-up-phoenix-framework-and-ecto-to-use-uuids-how-to-insert-the-generated&quot;&gt;stackoverflow post&lt;/a&gt; and a &lt;a href=&quot;https://groups.google.com/forum/#!topic/phoenix-talk/OZaL2nSWUTE&quot;&gt;google group discussion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since ecto version &lt;em&gt;0.12.1&lt;/em&gt; using UUIDs as primary key coudn’t be any easier. Here is how to do it:&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The migration that creates the table will need to be aware of the fact that ID column is going to be of UUID type.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='elixir'&gt;&lt;span class='k'&gt;defmodule&lt;/span&gt; &lt;span class='no'&gt;Blog&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='no'&gt;Repo&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='no'&gt;Migrations&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='no'&gt;CreatePost&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
&lt;span class='k'&gt;  &lt;/span&gt;&lt;span class='kn'&gt;use&lt;/span&gt; &lt;span class='no'&gt;Ecto&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='no'&gt;Migration&lt;/span&gt;

  &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;up&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;

&lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='c1'&gt;# Here we are specifying to not use default auto-incrementing id as primary key&lt;/span&gt;
    &lt;span class='n'&gt;create&lt;/span&gt; &lt;span class='n'&gt;table&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:posts&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;primary_key:&lt;/span&gt; &lt;span class='no'&gt;false&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
&lt;span class='k'&gt;      &lt;/span&gt;&lt;span class='c1'&gt;# Here we explicitly set the type of id column as uuid and assign it as primary key&lt;/span&gt;
      &lt;span class='n'&gt;add&lt;/span&gt; &lt;span class='ss'&gt;:id&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:uuid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;primary_key:&lt;/span&gt; &lt;span class='no'&gt;true&lt;/span&gt;
      &lt;span class='n'&gt;add&lt;/span&gt; &lt;span class='ss'&gt;:title&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:string&lt;/span&gt;
      &lt;span class='n'&gt;add&lt;/span&gt; &lt;span class='ss'&gt;:body&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:text&lt;/span&gt;

      &lt;span class='n'&gt;timestamps&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

  &lt;span class='k'&gt;end&lt;/span&gt;

  &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;down&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
&lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='n'&gt;drop&lt;/span&gt; &lt;span class='n'&gt;table&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:posts&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will also need to update our model definition so that it can auto-generate UUIDs for primary keys.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='elixir'&gt;&lt;span class='k'&gt;defmodule&lt;/span&gt; &lt;span class='no'&gt;Blog&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='no'&gt;Post&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
&lt;span class='k'&gt;  &lt;/span&gt;&lt;span class='kn'&gt;use&lt;/span&gt; &lt;span class='no'&gt;Blog&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='no'&gt;Web&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:model&lt;/span&gt;

  &lt;span class='c1'&gt;# :binary_id is managed by drivers/adapters, it will be UUID for mysql, postgres&lt;/span&gt;
  &lt;span class='c1'&gt;#  but can be ObjectID if later you decide to use mongo&lt;/span&gt;
  &lt;span class='nv'&gt;@primary_key&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:id&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:binary_id&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;autogenerate:&lt;/span&gt; &lt;span class='no'&gt;true&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;

  &lt;span class='n'&gt;schema&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;posts&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
&lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='n'&gt;field&lt;/span&gt; &lt;span class='ss'&gt;:title&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:string&lt;/span&gt;
    &lt;span class='n'&gt;field&lt;/span&gt; &lt;span class='ss'&gt;:body&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:string&lt;/span&gt;

    &lt;span class='n'&gt;timestamps&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;

  &lt;span class='nv'&gt;@required_fields&lt;/span&gt; &lt;span class='err'&gt;~&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;title&lt;/span&gt; &lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='nv'&gt;@optional_fields&lt;/span&gt; &lt;span class='err'&gt;~&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;


  &lt;span class='nv'&gt;@doc&lt;/span&gt; &lt;span class='sd'&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class='sd'&gt;  Creates a changeset based on the `model` and `params`.&lt;/span&gt;

&lt;span class='sd'&gt;  If `params` are nil, an invalid changeset is returned&lt;/span&gt;
&lt;span class='sd'&gt;  with no validation performed.&lt;/span&gt;
&lt;span class='sd'&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;changeset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;model&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;params&lt;/span&gt; &lt;span class='p'&gt;\\&lt;/span&gt; &lt;span class='ss'&gt;:empty&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
&lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='n'&gt;model&lt;/span&gt;
    &lt;span class='o'&gt;|&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;cast&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;@required_fields&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;@optional_fields&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that is all you need to use UUIDs from primary keys with ecto and phoenix framework.&lt;/p&gt;

&lt;p&gt;As an aside, I really like how these projects are shaping up. Also, the community around Elixir and Phoenix is absolutely fantastic. It took me no more than 5 minutes to figure this out by hopping on Elixir IRC and José Valim himself explaining how to solve this problem.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>I dont have an itch</title>
      <link>http://websymphony.net/blog/2013/05/15/i-dont-have-an-itch/</link>
      <pubDate>Wed, 15 May 2013 22:25:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2013/05/15/i-dont-have-an-itch</guid>
      <description>&lt;p&gt;If you are a programmer and need constant ideas to work on, there comes a time when the ideas are just not there. And if you ask someone for advice, lot of times suggestion is that you should “scratch your own itch”. In other words, try to solve your own problem. And since, it is likely that lot of people will be struggling with the same problem as you, you might uncover a market.&lt;/p&gt;

&lt;p&gt;The advice sounds fine and dandy, but what about the people who are happy with status quo. Let me give you an example:&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Drew Houston kept forgetting his USB stick, saw the problem in keeping files in sync between different machines and identifies the opportunity to improve the situation and Dropbox is born.&lt;/p&gt;

&lt;p&gt;For the same scenario had I been in his shoes. I would have blamed myself for being stupid &amp;amp; forgetting the USB. And as a solution, would have made a mental note of checking USB stick before leaving, every time.&lt;/p&gt;

&lt;p&gt;This leap of identifying the “cause” as a problem and not dwelling on the “symptom” seems to be the key. For me, the problem was being absent minded. For Drew, problem was lack of service that syncs files between different machines so that he doesn’t have to remember to carry USB stick with him all the time.&lt;/p&gt;

&lt;p&gt;So, for people like me who cannot easily identify between “cause” and “symptom”. I have a better solution for identifying ideas to work on. Look for already existing products that you think you can do a better job at, and then just go ahead and do it.&lt;/p&gt;

&lt;p&gt;Easiest would be to compete on price, if you can provide better feature set for same or lower price. Or even better, address pain-points of existing products with better, easier implementation.&lt;/p&gt;

&lt;p&gt;Being first is a definite advantage, but never let that stop you from building something that already exists. There can always be a better, faster, prettier product for any already existing product.&lt;/p&gt;

&lt;p&gt;I am trying to apply this approach with &lt;a href=&quot;https://hipcv.com&quot;&gt;HipCV&lt;/a&gt;. Making resumes or cv is a very crowded market with plenty of competitors and plenty to spend on marketing. Still I am trying my best to create a better, cheaper solution.&lt;/p&gt;

&lt;p&gt;And I will suggest that you should too.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Last couple of weeks in review for HipCV</title>
      <link>http://websymphony.net/blog/2013/03/02/last-couple-of-weeks-in-review-for-hipcv/</link>
      <pubDate>Sat, 02 Mar 2013 08:31:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2013/03/02/last-couple-of-weeks-in-review-for-hipcv</guid>
      <description>&lt;p&gt;In this post I review past couple of weeks for my current project HipCV.&lt;/p&gt;

&lt;p&gt;Two weeks ago, I launched a service for creating online resumes called &lt;a href=&quot;https://hipcv.com&quot;&gt;HipCV&lt;/a&gt;. The response to the site has been lukewarm, nothing majorly ground breaking. Which is understandable as there are many resume builders already out there. Also, there has not been any serious marketing effort yet from my end to promote the service.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Alright, so here are the stats for the last couple of weeks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unique visitors: &lt;strong&gt;392&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Page Views: &lt;strong&gt;1078&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Sign Ups: &lt;strong&gt;21&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Paid Users: &lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Out of these 392 users, around 40% (~156) left the site just after visiting the homepage and did not even sign up to try the free product, which leads me to believe few things. Either they ended upon the site by accident and didn’t really need the product. Or they did need the product, but the copy/features of the landing page were not convincing enough to sign up.&lt;/p&gt;

&lt;p&gt;To improve this situation I have made few changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Have brought the signup page on the landing page itself. Lot of users fell out of the funnel between the main call to action to sign up page and the actual signup. Am making an assumption that, since it will reduce the delay between looking at features and signing up, it should increase the signups.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Have also improved the copy of landing page a bit. Now every feature is better explained and is supported by either a bigger image or an example.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the traffic has reduced greatly (only 6-10 visits per day) in last few days, Can’t tell for sure if any of these changes are working. Will keep you posted as I get more insights.&lt;/p&gt;

&lt;p&gt;If you are in need of a stylish Resume, go and try &lt;a href=&quot;https://hipcv.com&quot;&gt;HipCV&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you would like to follow the progress of the project, &lt;a href=&quot;http://feeds.feedburner.com/websymphony&quot;&gt;subscribe&lt;/a&gt; to the feed.&lt;/p&gt;

&lt;p&gt;Till next time.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>So it Begins</title>
      <link>http://websymphony.net/blog/2013/02/19/so-it-begins/</link>
      <pubDate>Tue, 19 Feb 2013 20:06:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2013/02/19/so-it-begins</guid>
      <description>&lt;p&gt;For the first time, I have launched something that I am planning to charge money for. You know what, scratch that. Actually it is the first time I have seen something till the end.&lt;/p&gt;

&lt;p&gt;It has been only 3 days since the “launch” and I have already realized that partial completion of arbitrary feature list is not the end, it is actually far from it. When you “launch” a web application, that launch doesn’t really mean anything. No one knows about it, no one is visiting it, no one is searching for it. And that’s where the actual start is, a start to gather visitors and a start to convert those visitors into paying users.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Shipping a product is just a small step, on a very long road ahead. And I have decided to document this journey, on this blog. I plan to write everything, every idea I am thinking of, my rationale behind that idea. Most importantly, how I am putting that idea into practice and the results that I am getting.&lt;/p&gt;

&lt;p&gt;It is going to be an fun ride, you will either see rise of something remarkable or it will just fade away. In either case, you will get to learn something good from it. So, now will be a good time to bookmark this blog or for to &lt;a href=&quot;http://feeds.feedburner.com/websymphony&quot;&gt;subscribe&lt;/a&gt; to the feed. ;)&lt;/p&gt;

&lt;p&gt;So without further ado, let me introduce you to the product. It is a simple application that lets you create, manage and track Professional looking resumes. It is called &lt;a href=&quot;https://hipcv.com&quot;&gt;&lt;strong&gt;HipCV&lt;/strong&gt;&lt;/a&gt;, catchy name eh?! Only 5 characters long and it is actually related to the project. Already Winning!&lt;/p&gt;

&lt;p&gt;Jokes aside, list of things that I have already done for the project till now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Well, I have squatted all the possible online places by the name HipCV. &lt;a href=&quot;http://twitter.com&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://facebook.com/hipcv&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://plus.google.com/108449441565541919231/posts&quot;&gt;Google+&lt;/a&gt;, &lt;a href=&quot;http://pinterest.com/hipcv&quot;&gt;Pinterest&lt;/a&gt; and maybe some more. Can’t seem to remember all of them right now, but I guess you can find them when you search for &lt;a href=&quot;http://www.google.com/search?q=hipcv&quot;&gt;HipCV&lt;/a&gt; keyword. I did this because I thought when the someone will search for the site by name. All the top links that show up, should get people to the site somehow. And secondly every business has to have social presence, so why not.&lt;/li&gt;

&lt;li&gt;Put a stop on my never ending feature list and have shipped a minimal product that I think, provides something of value to the users.&lt;/li&gt;

&lt;li&gt;I did an exhaustive research on competing products and services. Most of them are charging monthly fees, so I am planning to compete on price by giving the product out for one time payment and with almost the same feature set.&lt;/li&gt;

&lt;li&gt;Tried to promote it on reddit/r/startups, didn’t get anything useful out. Was suggested to make the service free for few years and then charge money after I have users. Which I thought was a terrible suggestion, and bummed me out as well. So the pricing stayed.&lt;/li&gt;

&lt;li&gt;Did some search for sites that list newly launched websites. Found few of them, startupli.st, startuptunes are the ones I sent email to. Haven’t heard back yet, so if app gets listed, that will bring some traffic I think. I found these sites from this onstartups &lt;a href=&quot;http://answers.onstartups.com/questions/31787/are-there-any-blogs-or-websites-introducing-new-website&quot;&gt;answer&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;I was able to get it listed on &lt;a href=&quot;http://feedmyapp.com/p/a/hipcv/26669&quot;&gt;feedmyapp&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://ziipa.com/apps/hipcv&quot;&gt;ziipa&lt;/a&gt;, pretty excited about that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, time for the results for past 3 days. Site had &lt;strong&gt;63&lt;/strong&gt; unique visits, and yes that is apart from me checking the site constantly if it was still up in this overwhelming traffic. And out of those, &lt;strong&gt;7&lt;/strong&gt; have signed up to try the product and created a resume. So I guess you could say things are getting pretty serious.&lt;/p&gt;

&lt;p&gt;If you are in need of a stylish Resume, go and try &lt;a href=&quot;https://hipcv.com&quot;&gt;HipCV&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you would like to follow the progress of the project, &lt;a href=&quot;http://feeds.feedburner.com/websymphony&quot;&gt;subscribe&lt;/a&gt; to the feed.&lt;/p&gt;

&lt;p&gt;Till next time.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Fixing utf8 encoding issue in Postgres</title>
      <link>http://websymphony.net/blog/2012/10/20/fixing-utf8-encoding-issue-in-postgres/</link>
      <pubDate>Sat, 20 Oct 2012 12:05:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2012/10/20/fixing-utf8-encoding-issue-in-postgres</guid>
      <description>&lt;p&gt;I was trying to setup Postgres for rails on an Ubuntu machine. And on running&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;rake&lt;/span&gt; &lt;span class='ss'&gt;db&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='n'&gt;create&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran into the following error:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='sql'&gt;&lt;span class='n'&gt;PGError&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;ERROR&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='k'&gt;encoding&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;UTF8&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;is&lt;/span&gt; &lt;span class='n'&gt;incompatible&lt;/span&gt; &lt;span class='k'&gt;with&lt;/span&gt; &lt;span class='n'&gt;the&lt;/span&gt; &lt;span class='k'&gt;encoding&lt;/span&gt; &lt;span class='k'&gt;of&lt;/span&gt; &lt;span class='n'&gt;the&lt;/span&gt; &lt;span class='k'&gt;template&lt;/span&gt; &lt;span class='k'&gt;database&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SQL_ASCII&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;HINT&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='n'&gt;Use&lt;/span&gt; &lt;span class='n'&gt;the&lt;/span&gt; &lt;span class='n'&gt;same&lt;/span&gt; &lt;span class='k'&gt;encoding&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='n'&gt;the&lt;/span&gt; &lt;span class='k'&gt;template&lt;/span&gt; &lt;span class='k'&gt;database&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;or&lt;/span&gt; &lt;span class='n'&gt;use&lt;/span&gt; &lt;span class='n'&gt;template0&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='k'&gt;template&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='k'&gt;CREATE&lt;/span&gt; &lt;span class='k'&gt;DATABASE&lt;/span&gt; &lt;span class='ss'&gt;&amp;quot;app_development&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;ENCODING&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;unicode&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--more--&gt;
&lt;p&gt;The database.yml file before:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='l-Scalar-Plain'&gt;development&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;adapter&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;postgresql&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;encoding&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;unicode&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;database&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;app_development&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;pool&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;5&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;username&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;amit&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;password&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;template&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;template0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where it will use template0 from the database.yml and will ask me to change the default encoding to something else.&lt;/p&gt;

&lt;p&gt;The solution turned out to be changing the default Postgres &lt;code&gt;template1&lt;/code&gt; to use &lt;code&gt;utf8 encoding&lt;/code&gt; by default. By following the following gist:&lt;/p&gt;
&lt;script src='https://gist.github.com/3923995.js'&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;And changing database.yml to use template1 instead.&lt;/p&gt;

&lt;p&gt;The database.yml file after:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='l-Scalar-Plain'&gt;development&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;adapter&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;postgresql&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;encoding&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;unicode&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;database&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;app_development&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;pool&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;5&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;username&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;amit&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;password&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;template&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;template1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope this helps someone who runs into the same issue as I did.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>How 'this' in javascript is similar to 'self' in ruby</title>
      <link>http://websymphony.net/blog/2012/04/21/how-this-in-javascript-is-similar-to-self-in-ruby/</link>
      <pubDate>Sat, 21 Apr 2012 13:23:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2012/04/21/how-this-in-javascript-is-similar-to-self-in-ruby</guid>
      <description>&lt;p&gt;When you read or learn something new, you always try to find a correlation of new knowledge to something you already knew. So when I learned how ‘self’ changes in a ruby program, I couldn’t help but notice similarity to ‘this’ in javascript. In both ruby and javascript, ‘self’ and ‘this’ refer to the current object. Both ‘self’ and ‘this’ are transient and change depending upon the context.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Lets consider an example of ‘self’ in ruby first.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;MyExample&lt;/span&gt;
 &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;say_hello&lt;/span&gt;
    &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='nb'&gt;self&lt;/span&gt;
 	&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Hello there.&amp;quot;&lt;/span&gt;
 &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;

&lt;span class='c1'&gt;#calling the function&lt;/span&gt;
&lt;span class='n'&gt;my_example_obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;MyExample&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;
&lt;span class='n'&gt;my_example_obj&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;say_hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have defined a simple class MyExample, which has an instance method &lt;em&gt;say&lt;/em&gt;hello_. Then we create an instance of the class and call &lt;em&gt;say&lt;/em&gt;hello_ on it. Upon invocation of instance method, ‘self’ is changed to &lt;em&gt;my&lt;/em&gt;example_obj_ and therefore it prints signature of &lt;em&gt;my&lt;/em&gt;example_obj_ followed by “Hello there.”&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='c1'&gt;#OUTPUT:&lt;/span&gt;
&lt;span class='c1'&gt;#&amp;lt;MyExample:0x00000101082e68&amp;gt;&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;Hello there.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;Now lets see how an equivalent javascript handles ‘this’.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;MyExample&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;MyExample&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='s1'&gt;&amp;#39;say_hello&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
		&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
		&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Hello there.&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;my_example_obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;MyExample&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='nx'&gt;my_example_obj&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;say_hello&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have defined a simple class MyExample just like our ruby program and have defined &lt;em&gt;say&lt;/em&gt;hello_ method which gives us insight about ‘this’. And similar to ‘self’ in our ruby program, in javascript ‘this’ changes to the object, the method was called on and hence we get the following output.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='cm'&gt;/*OUTPUT*/&lt;/span&gt;
&lt;span class='nx'&gt;MyExample&lt;/span&gt; &lt;span class='cm'&gt;/*the value of &amp;#39;this&amp;#39;*/&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;Hello there.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is interesting to see how different languages solve certain problems. And due to fundamental similarities in concept, i.e. dynamic nature of javascript, ruby. They have similar concept of ‘this’ and ‘self’ in method invocation on objects.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Where to find people to validate your MVP?</title>
      <link>http://websymphony.net/blog/2012/03/21/where-to-find-people-to-validate-your-mvp/</link>
      <pubDate>Wed, 21 Mar 2012 00:31:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2012/03/21/where-to-find-people-to-validate-your-mvp</guid>
      <description>&lt;p&gt;Its 6:00am, your alarm buzzed for the 4th time. There is no denying the inevitable anymore, you have to finally get up. You prepare yourself for the same daily grind, curse your current job and wonder why don’t you ever get one of those world changing brilliant ideas. Now you are finally getting ready, looking in the mirror for last bit of self resolve that will take you through the day. And then it comes to you. An epiphany, finally an idea that is amazing. You get ready and head out, it feels different this time. It is going to work this time, it is going to change the internet and your life forever, you say to yourself.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;No matter how hard you try, you are just not able to get it out of your head, it just keeps bouncing back. Itching to just get home and start documenting all the features that your brain can spit out.&lt;/p&gt;

&lt;p&gt;A day passes, idea still seems pretty cool. You decide on building this mammoth of a product with all the bells and whistles that you could think of or your neighbor’s grandmother suggested as she overheard you talking to her grandson. But sanity prevailed and you instead decided on building a MVP (Minimum Viable Product) first and validate the need or market for the idea. All fine and dandy till now.&lt;/p&gt;

&lt;p&gt;You start burning midnight oil, start putting in hours over the weekend. Month passes by and your fictional launch date arrives. You do have some sort of a working product. Now is the time to find those people who are going to use this amazing thing that just got built. You share it with 53 followers that you have on twitter, you even write a post on a blog that gets 78 hits a month. You even share it on G+ and Facebook. Your non technical high school friends like it twice.&lt;/p&gt;

&lt;p&gt;Launched came and went by. Looking at google analytics the next day, brings out the cold truth. Nobody really cares. Site had 126 visitors, 3 signed up. You are still hopeful, but the rest of week’s stats wipe that hope for good.&lt;/p&gt;

&lt;p&gt;So where are the people that could have actually used your product or at-least given some kind of feedback. Positive or negative doesn’t matter anymore, just some real people giving real opinions on what they think of the thing.&lt;/p&gt;

&lt;p&gt;Here is the list of 7 sites online that I know of, where you could find such people. Off course this list is not complete, or even sorted in any order of importance. But it will definitely double or triple the reach of your MVP as compared to the previous scenario.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://swym.me&quot;&gt;Share what you make.&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://betali.st&quot;&gt;http://betali.st&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://startupli.st&quot;&gt;http://startupli.st&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://dzone.com&quot;&gt;DZone&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://news.ycombinator.com&quot;&gt;Hacker News&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://reddit.com/r/startups&quot;&gt;Reddit Startups&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://digg.com&quot;&gt;Digg&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For getting the best results in the last 4 sites. Ask your friends to provide initial few upvotes that can increase your chances for getting noticed. If your idea had potential and your MVP had some legs, it should begin a journey of its own from here on.&lt;/p&gt;

&lt;p&gt;If you know more of such sites, please let me know and I will happily update the list.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>How Logical AND and OR Operators Actually Work in Javascript.</title>
      <link>http://websymphony.net/blog/2011/11/02/how-logical-and-and-or-operators-actually-work-in-javascript/</link>
      <pubDate>Wed, 02 Nov 2011 21:44:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2011/11/02/how-logical-and-and-or-operators-actually-work-in-javascript</guid>
      <description>&lt;p&gt;Last night, I watched &lt;em&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=v2ifWcnQs6M&quot; title=&quot;Douglas Crockford: The JavaScript Programming Language&quot;&gt;Douglas Crockford: The JavaScript Programming Language&lt;/a&gt;&lt;/em&gt; and learned something interesting about logical &lt;strong&gt;&lt;em&gt;AND&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/strong&gt; operators in javascript. Thought, I should share it with everyone.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Lets look at the logical &lt;strong&gt;&lt;em&gt;AND&lt;/em&gt;&lt;/strong&gt; operator first.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;expr1&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='nx'&gt;expr2&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt; &lt;span class='c1'&gt;//do something }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As per my earlier understanding of this operator, the code snippet above will execute anything inside the &lt;strong&gt;&lt;em&gt;if block&lt;/em&gt;&lt;/strong&gt; if operands “expr1” and “expr2” are both &lt;em&gt;truthy&lt;/em&gt;. Which is absolutely correct and that is exactly how it works. Only catch is, what actually happens behind the scenes. According to Mozilla’s javascript documentation for &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Guide/Expressions_and_Operators#Logical_Operators&quot;&gt;logical operators&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Logical AND) Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, &amp;amp;&amp;amp; returns true if both operands are true; otherwise, returns false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in other words that means &lt;strong&gt;&lt;em&gt;expr1 &amp;amp;&amp;amp; expr2&lt;/em&gt;&lt;/strong&gt; will return &lt;em&gt;expr2&lt;/em&gt; if &lt;em&gt;expr1&lt;/em&gt; is &lt;em&gt;truthy&lt;/em&gt; otherwise &lt;em&gt;expr1&lt;/em&gt; will be returned.&lt;/p&gt;

&lt;p&gt;NOTE: It is not returning “true” or “false”, instead it is returning either of the expressions themselves when used with non Boolean Values.&lt;/p&gt;

&lt;p&gt;Okay cool, so with this information lets see what actually happened inside the &lt;strong&gt;&lt;em&gt;if block&lt;/em&gt;&lt;/strong&gt;. So if &lt;em&gt;expr1&lt;/em&gt; was &lt;em&gt;truthy&lt;/em&gt;, &lt;em&gt;expr1 &amp;amp;&amp;amp; expr2&lt;/em&gt; returns &lt;em&gt;expr2&lt;/em&gt;. Now, the &lt;strong&gt;&lt;em&gt;if block&lt;/em&gt;&lt;/strong&gt; gets executed only when &lt;em&gt;expr2&lt;/em&gt; is also &lt;em&gt;truthy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hence, in the end both expressions need to be &lt;em&gt;truthy&lt;/em&gt; for the &lt;strong&gt;&lt;em&gt;if block&lt;/em&gt;&lt;/strong&gt; to get executed, which is what we initially started with.&lt;/p&gt;

&lt;p&gt;Lets see how we can use this for refactoring a common scenario where we want to call a method on an object only upon the existance of object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial code:&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;	&lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
	 &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;method&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
	 &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Refactored Code:&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;method&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Refactored code does exactly the same thing, but is more expressive and faster.&lt;/p&gt;

&lt;p&gt;Lets look at logical &lt;strong&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/strong&gt; now.&lt;/p&gt;

&lt;p&gt;By definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Logical OR) Returns expr1 if it can be converted to true; otherwise, returns expr2. Thus, when used with Boolean values, || returns true if either operand is true; if both are false, returns false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or in other words, &lt;strong&gt;&lt;em&gt;expr1 || expr2&lt;/em&gt;&lt;/strong&gt; will return &lt;em&gt;expr1&lt;/em&gt; if &lt;em&gt;expr1&lt;/em&gt; is &lt;em&gt;truthy&lt;/em&gt; otherwise &lt;em&gt;expr2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Again NOTE: It is not returning “true” or “false”, instead it is returning either of the expressions themselves when used with non Boolean Values.&lt;/p&gt;

&lt;p&gt;This can be used to define default values for variables in an expressive fashion.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;myVar&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;input&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='k'&gt;default&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;em&gt;myVar&lt;/em&gt; will be assigned &lt;em&gt;input&lt;/em&gt; if it is truthy other wise &lt;em&gt;default&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And that’s it for now. If you have any questions or suggestions, feel free to hit me up on &lt;a href=&quot;http://twitter.com/websymphony&quot;&gt;twitter&lt;/a&gt; or leave a comment below and I’ll do my best to help!&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Using MongoDB With BackboneJS</title>
      <link>http://websymphony.net/blog/2011/09/12/using-mongodb-with-backbonejs/</link>
      <pubDate>Mon, 12 Sep 2011 22:28:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2011/09/12/using-mongodb-with-backbonejs</guid>
      <description>&lt;p&gt;So I ran into a small issue while working on a Rails 3.1 app which uses MongoDB as a backend and BackboneJS for bits and pieces of interactive ui. Changes in the &lt;em&gt;Collections&lt;/em&gt;, i.e. addition or removal of &lt;em&gt;Model&lt;/em&gt; objects to the &lt;em&gt;Collection&lt;/em&gt; were not triggering appropriately binded &lt;em&gt;View&lt;/em&gt; functions.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;In MongoDB to identify a document uniquely we have “_id” attribute, which is similar to “id” column in relational database, which identifies a row uniquely.&lt;/p&gt;

&lt;p&gt;And since by default, BackboneJS looks for “id” attribute to uniquely identify a &lt;em&gt;Model&lt;/em&gt; object. It wasn’t able to know if a unique &lt;em&gt;Model&lt;/em&gt; object had been added or removed from the &lt;em&gt;Collection&lt;/em&gt;. The fix to the problem turns out to be pretty simple and is clearly mentioned in the &lt;a href=&quot;http://documentcloud.github.com/backbone/docs/backbone.html#section-22&quot;&gt;comments&lt;/a&gt; of the BackboneJS library itself.&lt;/p&gt;

&lt;p&gt;All you have to do is to explicitly set the idAttribute to “_id” in BackboneJS Model.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt; &lt;span class='nx'&gt;idAttribute&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And everything should work fine after that as far as MongoDB with BackboneJS is concerned.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>First Post</title>
      <link>http://websymphony.net/blog/2011/09/03/first-post/</link>
      <pubDate>Sat, 03 Sep 2011 21:32:00 +0000</pubDate>
      <author></author>
      <guid>http://websymphony.net/blog/2011/09/03/first-post</guid>
      <description>&lt;p&gt;So I have finally decided to move my blog from &lt;a href=&quot;http://websymphony.posterous.com&quot;&gt;posterous&lt;/a&gt; to &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt;. Was planning on doing this for ages, just never got chance to go about it. After moving to Posterous, I never really liked the way it was setup. Lack of &lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; commenting support, that annoying posterous header on top right corner on every page, generic looking low contrast themes, lack of enough control over the content and formatting. Just didn’t feel right. So finally decided to take the plunge and take things back into my control.&lt;/p&gt;

&lt;p&gt;Whole process of creating blog on Octopress was pretty straightforward, since documentation is pretty self explanatory. Only gotcha I ran into was to configure it with my domain using CNAME file. Had to modify the rakefile little bit to get that working.&lt;/p&gt;

&lt;p&gt;Had to modify Rakefile&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;desc&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;deploy public directory to github pages&amp;quot;&lt;/span&gt;
&lt;span class='n'&gt;multitask&lt;/span&gt; &lt;span class='ss'&gt;:push&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
	&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;## Deploying branch to Github Pages &amp;quot;&lt;/span&gt;
	&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;Dir&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;deploy_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;/*&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;each&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;rm_rf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nb'&gt;system&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;cp -R &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;public_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;/* &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;deploy_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
	&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;## copying &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;public_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt; to &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;deploy_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
	&lt;span class='n'&gt;cd&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;deploy_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
		&lt;span class='nb'&gt;system&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;git add .&amp;quot;&lt;/span&gt;
		&lt;span class='nb'&gt;system&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;git add -u&amp;quot;&lt;/span&gt;
		&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;## Commiting: Site updated at &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='no'&gt;Time&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;utc&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
		&lt;span class='n'&gt;message&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Site updated at &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='no'&gt;Time&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;now&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;utc&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
		&lt;span class='nb'&gt;system&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;git commit -m &amp;#39;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;message&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;#39;&amp;quot;&lt;/span&gt;
		&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;## Pushing generated &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;deploy_dir&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt; website&amp;quot;&lt;/span&gt;
		&lt;span class='nb'&gt;system&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;git push origin &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;deploy_branch&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;
		&lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;## Github Pages deploy complete&amp;quot;&lt;/span&gt;
	&lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;by adding:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;	&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
	&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;write&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;websymphony.net&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
	&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and after that redirects started working properly. Easy Peasy.&lt;/p&gt;

&lt;p&gt;Octopress uses &lt;a href=&quot;http://compass-style.org&quot;&gt;Compass&lt;/a&gt; for styling, which makes changing of look and feel of the site a breeze. Overall am pretty happy with the system so far. I have intentionally decided to not move over any of the old content from posterous to start afresh with a clean slate. Not having anything noteworthy on the old blog that people might miss has made the move lot more simpler.&lt;/p&gt;

&lt;p&gt;Am planning on blogging on a regular basis from now on, atleast 2 times a week. Lets see how much success I have sticking to it.&lt;/p&gt;</description>
    </item>
    
    

  </channel>
</rss>